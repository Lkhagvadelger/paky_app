generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String           @id @default(cuid())
  code                String?          @unique
  email               String?          @unique
  emailVerified       DateTime?
  passwordDigest      String?
  phoneNumber         String           @unique
  phoneNumberVerified DateTime?
  role                UserRole         @default(COMPANY)
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  pin                 String?
  pinCreatedAt        DateTime?
  pinType             String?
  pinVerifiedAt       DateTime?
  profile             Profile?
  tags                String[]         @default([])
}

model Tags {
  id        String   @id @default(cuid())
  name      String
  color     String   @default("#fff")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id                 String    @id @default(cuid())
  userId             String    @unique
  firstName          String    @default("")
  lastName           String    @default("")
  sex                String?
  dob                String?
  height             Int?
  weight             Int?
  picture            String?
  priceMin           Int?
  priceMax           Int?
  notifyEmail        Boolean   @default(true)
  notifyPush         Boolean   @default(true)
  notifyBadge        Boolean   @default(true)
  historyId          String?   @unique
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model SmsRequestAttempt {
  id          String   @id @default(cuid())
  phoneNumber String
  ipAddress   String
  createdAt   DateTime @default(now())
}

model FileUpload {
  id                   String    @id @default(cuid())
  fileGroup            String?
  fileLink             String
  fileSource           String
  removedAt            DateTime?
  createdBy            String
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  fileCategory         String?
  fileSourceDate       String?
  patientNoteId        String?
  fileMIMEType         String
  specialistQuestionId String?
}

enum UserRole {
  ADMIN
  COMPANY
}

model IP2Location {
  id          String   @id @default(cuid())
  ipFrom      BigInt
  ipTo        BigInt
  countryCode String
  country     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model FirebaseToken {
  id        String   @id @default(cuid())
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
